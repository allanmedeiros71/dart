// Mocks generated by Mockito 5.4.5 from annotations
// in assincronismo/test/screens/account_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:assincronismo/models/account.dart' as _i2;
import 'package:assincronismo/services/account_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAccount_0 extends _i1.SmartFake implements _i2.Account {
  _FakeAccount_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AccountService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAccountService extends _i1.Mock implements _i3.AccountService {
  @override
  String get url =>
      (super.noSuchMethod(
            Invocation.getter(#url),
            returnValue: _i4.dummyValue<String>(this, Invocation.getter(#url)),
            returnValueForMissingStub: _i4.dummyValue<String>(
              this,
              Invocation.getter(#url),
            ),
          )
          as String);

  @override
  set url(String? _url) => super.noSuchMethod(
    Invocation.setter(#url, _url),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Stream<String> get streamInfos =>
      (super.noSuchMethod(
            Invocation.getter(#streamInfos),
            returnValue: _i5.Stream<String>.empty(),
            returnValueForMissingStub: _i5.Stream<String>.empty(),
          )
          as _i5.Stream<String>);

  @override
  _i5.Future<List<_i2.Account>> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i5.Future<List<_i2.Account>>.value(<_i2.Account>[]),
            returnValueForMissingStub: _i5.Future<List<_i2.Account>>.value(
              <_i2.Account>[],
            ),
          )
          as _i5.Future<List<_i2.Account>>);

  @override
  dynamic addAccount(_i2.Account? newAccount) => super.noSuchMethod(
    Invocation.method(#addAccount, [newAccount]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<_i2.Account> getAccountById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getAccountById, [id]),
            returnValue: _i5.Future<_i2.Account>.value(
              _FakeAccount_0(this, Invocation.method(#getAccountById, [id])),
            ),
            returnValueForMissingStub: _i5.Future<_i2.Account>.value(
              _FakeAccount_0(this, Invocation.method(#getAccountById, [id])),
            ),
          )
          as _i5.Future<_i2.Account>);

  @override
  _i5.Future<bool> updateAccount(_i2.Account? newAccount) =>
      (super.noSuchMethod(
            Invocation.method(#updateAccount, [newAccount]),
            returnValue: _i5.Future<bool>.value(false),
            returnValueForMissingStub: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool> deleteAccount(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteAccount, [id]),
            returnValue: _i5.Future<bool>.value(false),
            returnValueForMissingStub: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);
}
